{"version":3,"file":"static/js/37.a3253f0a.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","redux/contacts/contacts-selectors.js","components/Contacts/Contacts.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.jsx","views/ContactsView/ContactView.styled.js","views/ContactsView/ContactsView.jsx"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const ListElement= styled.li`\n  padding: 4px 4px;\n  gap: 10px;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-between;\n  font-weight: 500;\n \n`;","import propTypes from 'prop-types';\nimport React from 'react';\nimport { ListElement } from './ContactListItem.styled';\nimport { useDispatch } from 'react-redux';\n//import { deleteContact } from 'redux/contacts/contacts-operations';\nimport { useDeleteContactMutation } from 'services/api';\n\nexport const ContactListItem = ({ id, name, number }) => {\n\n  const [deleteContact] = useDeleteContactMutation();\n\n  //const dispatch = useDispatch();\n  return (\n    <ListElement>\n      <span>{name}:</span>\n      <span>{number}</span>\n      <button\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        X\n      </button>\n    </ListElement>\n  );\n};\n\nContactListItem.propTypes = {\n  name: propTypes.string.isRequired,\n  id: propTypes.string.isRequired,\n  phone: propTypes.string.isRequired,\n};\n","export const getFilter = state => state.contactsReducer.filter;","import React from 'react';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport Loader from 'components/Loader';\n//import { useEffect } from 'react';\n\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { useGetContactsQuery } from 'services/api';\n\nimport { useSelector, useDispatch } from 'react-redux';\n//import { getFilter } from 'redux/filter/filterSelectors';\n//import { fetchContacts } from 'redux/contacts/contacts-operations';\n\n\nconst ContactList = () => {\n\n  const filter = useSelector(getFilter);\n\n  const { data: contacts, isFetching, isError } = useGetContactsQuery();\n\n  const filteredContacts =\n  contacts &&\n  contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n\n  console.log(contacts);\n  console.log(filter);\nconst isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n  return (\n    <>\n      {isFetching && <Loader/>}\n      {isError && console.log(isError)}\n      {isContactsEmpty ? (\n        <ul>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      ) : (\n        <ul>\n          <p>No contacts found...</p>\n        </ul>\n      )}\n    </>\n    // <ul>\n    //   {filteredList.map(\n    //     (\n    //       { name, id, phone } //filterContacts()\n    //     ) => (\n    //       <ContactListItem key={id} name={name} id={id} phone={phone} />\n    //     )\n    //   )}\n    // </ul>\n  );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\nimport { Form, Field} from 'formik';\n\n  export const FormInput = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 400px;\n  border: 1px solid orange;\n  border-radius: 10px;\n  -webkit-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 10px 10px 5px 0px gray;\n  padding: 20px;\n  background-color: rgb(239, 239, 239);\n`;\n\n\nexport const FormLabel = styled.label`\nfont-weight: 500;\npadding: 10px;\npadding: 3px;\n`;\n\n\nexport const Input = styled(Field)`\nwidth: fit-content;\nmargin-top: 15px;\nmargin-bottom: 15px;\nmargin-left: 15px;\nborder-radius: 5px;\nborder-color: grey;\n`;","import { useState } from 'react';\n\nimport { Formik } from 'formik';\nimport { FormInput, FormLabel, Input } from './Form.styled';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\n\n//import { useDispatch } from 'react-redux';\n//import { addContact } from 'redux/contacts/contactsActions';\n//import { addContact } from 'redux/contacts/contacts-operations';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from 'services/api';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nfunction ContactForm() {\n  //const dispatch = useDispatch();\n\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n\n  // const nameInputId = nanoid();\n  // const numberInputId = nanoid();\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = event => {\n    event.preventDefault();\n    console.log(contacts);\n    if (\n      contacts && contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return Notify.failure(`Contact '${name}' is already exist`);\n    }\n    const id = nanoid();\n    addContact({ id, name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n  return (\n    <Formik initialValues={{ name: '', number: '' }}>\n      <FormInput autoComplete=\"off\" onSubmit={onSubmit}>\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n        </FormLabel>\n\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={event => setNumber(event.target.value)}\n          />\n        </FormLabel>\n\n        <button type=\"submit\">Add contact</button>\n      </FormInput>\n    </Formik>\n  );\n}\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const FiltrLabel = styled.label`\ndisplay: block;\n  margin-top: 10px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 18px;\n`;\n\nexport const FiltrInput = styled.input`\ndisplay: block;\n  margin-top: 10px;\n  padding: 10px;\n  width: 100%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font-size: 15px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { filterContact } from 'redux/contacts/contacts-actions';\nimport {FiltrInput, FiltrLabel} from './ContactFilter.styled';\n\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <div >\n      <FiltrLabel>\n        Find contacts by name\n        <FiltrInput\n          type=\"text\"\n          name=\"filter\"\n          \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Find contacts by name\"\n          placeholder=\"Enter search request here\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event))}\n        />\n      </FiltrLabel>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nmax-width: 450px;\n  margin: 0 auto;\n  padding-top: 30px;\n\n  text-align: center;\n\n`;\n\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactList from '../../components/Contacts';\nimport ContactForm from '../../components/Form';\nimport ContactFilter from '../../components/ContactFilter';\n//import { fetchContacts } from '../../redux/contacts/contacts-operations';\nimport {Wrapper} from './ContactView.styled';\n\n\nconst ContactsView = () => {\n  // const dispatch = useDispatch();\n\n  // useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  return (\n    <Wrapper>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <ContactFilter />\n      <ContactList />\n    </Wrapper>\n  );\n}\n\nexport default ContactsView;"],"names":["ListElement","styled","ContactListItem","id","name","number","useDeleteContactMutation","deleteContact","type","onClick","getFilter","state","contactsReducer","filter","useSelector","useGetContactsQuery","contacts","data","isFetching","isError","filteredContacts","contact","toLowerCase","includes","console","log","isContactsEmpty","length","Loader","map","FormInput","Form","FormLabel","Input","Field","INITIAL_STATE","useState","setName","setNumber","useAddContactMutation","addContact","reset","initialValues","autoComplete","onSubmit","event","preventDefault","find","Notify","nanoid","pattern","title","required","value","onChange","target","FiltrLabel","FiltrInput","dispatch","useDispatch","placeholder","filterContact","Wrapper","ContactFilter"],"sourceRoot":""}